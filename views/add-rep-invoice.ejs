<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/nav.css">
    <link rel="stylesheet" href="/css/add-page.css">
    <title>Add Rep Sales</title>
    <link rel="icon" href="/images/invoice.svg" type="image/x-icon">
</head>

<body>
    <!-- Include the navigation partial -->
    <%- include('./partials/nav.ejs') %>
        <div id="container">
            <form action="/rep-invoices/add" method="post">
                <div id="input-fields">
                    <label for="invoice_id">Dealer Invoice ID</label>
                    <input type="text" id="invoice_id" name="invoice_id" required>
                </div>
                <div id="input-fields">
                    <label for="invoice_date">Invoice Date</label>
                    <input type="date" id="invoice_date" name="invoice_date" required>
                </div>
                <div id="input-fields">
                    <label for="dealer_name">Dealer Name</label>
                    <select id="dealer_name" name="dealer_name" required>
                        <% dealers.forEach(dealer=> { %>
                            <option value="<%= dealer.shop_name %>">
                                <%= dealer.shop_name %>
                            </option>
                            <% }); %>
                    </select>
                </div>
                <div id="items-container">
                    <!-- Container to hold dynamically added items -->
                </div>
                <div class="mx-auto">
                    <label for="Total">Grand Total</label>
                    <span id="grand-total">0.00</span>
                </div>
                <div id="add-item-btn">
                    <button type="button" onclick="addItem()">Add Item</button>
                </div>
                <div id="add-item-btn">
                    <button type="submit">Add Invoice</button>
                </div>
            </form>
        </div>
        <script>
            const items = <%- JSON.stringify(items) %>;
            const itemNames = items.map(item => item.description);

            function addItem() {
                const itemsContainer = document.getElementById('items-container');
                const newItemField = `
            <div class="item-field">
                <div>
                    <label for="Item">Item Code</label>
                    <input type="text" name="item_codes[]" class="autocomplete-item-code" placeholder="Type item code" required oninput="filterAutocomplete(this, 'code')">
                    <ul class="autocomplete-list hidden"></ul>
                </div>

                <div id="item-name">
                    <label for="Description">Item Name</label>
                    <input type="text" name="descriptions[]" class="autocomplete-item-name" placeholder="Type item name" required oninput="filterAutocomplete(this, 'name')">
                    <ul class="autocomplete-list hidden"></ul>
                </div>
                <div>
                    <label for="Price">Unit Price</label>
                    <input type="number" step="0.01" name="prices[]" required oninput="updateTotal(this)">
                </div>
                <div>
                    <label for="quantity">Quantity</label>
                    <input type="number" name="quantities[]" required oninput="updateTotal(this)">
                </div>
                <div>
                    <label for="Discount">Discount</label>
                    <input type="number" step="0.01" name="discounts[]" required oninput="updateTotal(this)">
                </div>
                <div>
                    <label for="Total">Total</label>
                    <span class="item-total">0.00</span>
                </div>
                <div>
                    <button type="button" onclick="removeItem(this)">Remove</button>
                </div>
            </div>
            `;
                itemsContainer.insertAdjacentHTML('beforeend', newItemField);
            }

            function removeItem(button) {
                const itemField = button.closest('.item-field');
                itemField.remove();
            }

            function syncItemDetails(selectElement, type) {
                const selectedValue = selectElement.value;
                const itemField = selectElement.closest('.item-field');
                const itemCodeSelect = itemField.querySelector('[name="item_codes[]"]');
                const itemNameSelect = itemField.querySelector('[name="descriptions[]"]');
                const priceInput = itemField.querySelector('[name="prices[]"]');

                if (type === 'code') {
                    const selectedItem = items.find(item => item.item_code === selectedValue);
                    itemNameSelect.value = selectedItem.description;
                    priceInput.value = selectedItem.price;
                } else {
                    const selectedItem = items.find(item => item.description === selectedValue);
                    itemCodeSelect.value = selectedItem.item_code;
                    priceInput.value = selectedItem.price;
                }
            }

            const itemCodes = items.map(item => item.item_code);

            function filterAutocomplete(inputElement, type) {
        const list = inputElement.nextElementSibling;
        const search = inputElement.value.toLowerCase();
        const sourceArray = type === 'code' ? itemCodes : itemNames;

        // Filter based on input
        const filteredItems = sourceArray.filter(item => item.toLowerCase().includes(search));

        // Clear previous results
        list.innerHTML = '';

        // Populate autocomplete list
        if (search.trim() !== '' && filteredItems.length) {
            filteredItems.forEach(item => {
                const listItem = document.createElement('li');
                listItem.textContent = item;
                listItem.classList.add('autocomplete-item');
                listItem.onclick = () => selectAutocompleteItem(inputElement, item, type);
                list.appendChild(listItem);
            });
            list.classList.remove('hidden');
        } else {
            list.classList.add('hidden');
        }
    }

    function selectAutocompleteItem(inputElement, selectedItem, type) {
        inputElement.value = selectedItem;

        // Trigger other updates (e.g., syncing item details)
        syncItemDetails(inputElement, type);

        // Hide the autocomplete list
        const list = inputElement.nextElementSibling;
        list.innerHTML = '';
        list.classList.add('hidden');
    }

    function updateTotal(inputElement) {
                const itemField = inputElement.closest('.item-field');
                const price = parseFloat(itemField.querySelector('[name="prices[]"]').value) || 0;
                const quantity = parseFloat(itemField.querySelector('[name="quantities[]"]').value) || 0;
                const discount = parseFloat(itemField.querySelector('[name="discounts[]"]').value) || 0;

                const total = (price * quantity) * (1 - discount / 100);
                itemField.querySelector('.item-total').textContent = total.toFixed(2);

                updateGrandTotal();
    }

    function updateGrandTotal() {
                const totals = document.querySelectorAll('.item-total');
                let grandTotal = 0;
                totals.forEach(total => {
                    grandTotal += parseFloat(total.textContent);
                });
                document.getElementById('grand-total').textContent = grandTotal.toFixed(2);
    }
        </script>
</body>

</html>