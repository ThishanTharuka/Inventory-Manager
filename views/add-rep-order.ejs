<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/nav.css">
    <link rel="stylesheet" href="/css/add-page.css">
    <title><%= title %></title>
    <link rel="icon" href="/images/stock.svg" type="image/x-icon">
</head>
<body>
    <!-- Include the navigation partial -->
    <%- include('./partials/nav.ejs') %>
    <div id="container">
        <form action="/rep-orders/add" method="post">
            <div id="input-fields">
                <label for="order_date">Order Date</label>
                <input type="date" id="order_date" name="order_date" required>
            </div>
            <div id="items-container">
                <!-- Container to hold dynamically added items -->
            </div>
            <div id="add-item-btn">
                <button type="button" onclick="addItem()">Add Item</button>
            </div>
            <div id="add-item-btn">
                <button type="submit">Add Order</button>
            </div>
        </form>
    </div>
    <script>
        const items = <%- JSON.stringify(items) %>;
        const itemCodes = items.map(item => item.item_code);

        function addItem() {
            const itemsContainer = document.getElementById('items-container');
            const newItemField = `
                <div class="item-field">
                    <div>
                        <label for="Item">Item Code</label>
                        <input type="text" name="item_codes[]" class="autocomplete-item-code" placeholder="Type item code" required oninput="filterAutocomplete(this)">
                        <ul class="autocomplete-list hidden"></ul>
                    </div>
                    <div id="item-name">
                        <label for="Description">Item Name</label>
                        <select name="descriptions[]" onchange="syncItemDetails(this, 'name')" required>
                            ${items.map(item => `<option value="${escapeHtml(item.description)}">${escapeHtml(item.description)}</option>`).join('')}
                        </select>
                    </div>
                    <div>
                        <label for="Price">Unit Price</label>
                        <input type="number" step="0.01" name="prices[]" required readonly>
                    </div>
                    <div>
                        <label for="quantity">Quantity</label>
                        <input type="number" name="quantities[]" required>
                    </div>
                    <div>
                        <button type="button" onclick="removeItem(this)">Remove</button>
                    </div>
                </div>
            `;
            itemsContainer.insertAdjacentHTML('beforeend', newItemField);
        }

        function removeItem(button) {
            const itemField = button.closest('.item-field');
            itemField.remove();
        }

        function syncItemDetails(selectElement, type) {
            const selectedValue = selectElement.value;
            const itemField = selectElement.closest('.item-field');
            const itemCodeSelect = itemField.querySelector('[name="item_codes[]"]');
            const itemNameSelect = itemField.querySelector('[name="descriptions[]"]');
            const priceInput = itemField.querySelector('[name="prices[]"]');

            if (type === 'code') {
                const selectedItem = items.find(item => item.item_code === selectedValue);
                itemNameSelect.value = selectedItem.description;
                priceInput.value = selectedItem.price;
            } else {
                const selectedItem = items.find(item => item.description === selectedValue);
                itemCodeSelect.value = selectedItem.item_code;
                priceInput.value = selectedItem.price;
            }
        }

        function filterAutocomplete(inputElement) {
        const list = inputElement.nextElementSibling;
        const search = inputElement.value.toLowerCase();

        // Filter item codes based on input
        const filteredCodes = itemCodes.filter(code => code.toLowerCase().includes(search));

        // Clear previous results
        list.innerHTML = '';

        // Populate autocomplete list
        if (search.trim() !== '' && filteredCodes.length) {
            filteredCodes.forEach(code => {
                const listItem = document.createElement('li');
                listItem.textContent = code;
                listItem.classList.add('autocomplete-item');
                listItem.onclick = () => selectAutocompleteItem(inputElement, code);
                list.appendChild(listItem);
            });
            list.classList.remove('hidden');
        } else {
            list.classList.add('hidden');
        }
    }

    function selectAutocompleteItem(inputElement, selectedCode) {
        inputElement.value = selectedCode;

        // Trigger other updates (e.g., syncing item details)
        syncItemDetails(inputElement, 'code');

        // Hide the autocomplete list
        const list = inputElement.nextElementSibling;
        list.innerHTML = '';
        list.classList.add('hidden');
    }

        function escapeHtml(text) {
            return text
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
    </script>
</body>
</html>
