<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/add-page.css">
    <link rel="stylesheet" href="/nav.css">
    <title>
        <%= title %>
    </title>
</head>

<body>
    <!-- Include the navigation partial -->
    <%- include('./partials/nav.ejs') %>
        <div id="container">
            <form action="/add-order" method="post">
                <div id="input-fields">
                    <label for="Invoice">Dealer Invoice ID</label>
                    <input type="number" id="order_id" name="order_id" required>
                </div>
                <div id="input-fields">
                    <label for="Date">Date</label>
                    <input type="date" id="date" name="date" required>
                </div>
                <div id="input-fields">
                    <label for="Dealer">Dealer Name</label>
                    <select id="dealer_name" name="dealer_name" required>
                        <% dealers.forEach(dealer => { %>
                            <option value="<%= dealer.shop_name %>">
                                <%= dealer.shop_name %>
                            </option>
                        <% }); %>
                    </select>
                </div>
                <div id="invoice-container">
                    <!-- Container to add items from an invoice-->
                    <p class="subtitle">Add Items from Invoice</p>
                    <label for="invoice_id">Invoice ID</label>
                    <input type="number" id="invoice_id" name="invoice_id">
                    <div>
                        <button type="button" onclick="fetchInvoiceItems()">Add Items</button>
                    </div>
                    <table id="items-table">
                        <thead>
                            <th>Item Code</th>
                            <th>Item Name</th>
                            <th>Unit Price</th>
                            <th>Quantity</th>
                            <th>Discount (%)</th>
                            <th>Total</th>
                        </thead>
                        <tbody id="items-body">
                            <!-- Items will be dynamically added here -->
                        </tbody>
                    </table>
                </div>
                <div id="total-amount">
                    <p>Total Amount: <span id="grand-total">0.00</span></p>
                </div>
                <div id="items-container">
                    <p class="subtitle">Add Other Items</p>
                    <div id="add-item-btn">
                        <button type="button" onclick="addItem()">Add New Item</button>
                    </div>
                </div>
                <div id="add-item-btn">
                    <button type="submit">Add Order</button>
                </div>
            </form>
        </div>

        <script>
            const items = <%- JSON.stringify(items) %>;

            function fetchInvoiceItems() {
                const invoiceId = document.getElementById('invoice_id').value;
                fetch(`/orders/invoice-items/${invoiceId}`)
                    .then(response => response.json())
                    .then(data => {
                        const itemsBody = document.getElementById('items-body');
                        itemsBody.innerHTML = ''; // Clear previous items
                        data.forEach(item => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                            <td>
                                <select name="invoice_item_codes[]" required>
                                    <% items.forEach(item=> { %>
                                        <option value="${item.item_code}">
                                            ${item.item_code}
                                        </option>
                                    <% }); %>
                                </select>
                            </td>
                            <td>${item.description}</td>
                            <td><input type="number" step="0.01" name="invoice_prices[]" value="${item.price}" required oninput="updateTotal(this)"></td>
                            <td><input type="number" name="invoice_quantities[]" value="${item.quantity}" required oninput="updateTotal(this)"></td>
                            <td><input type="number" name="invoice_discounts[]" placeholder="0" required oninput="updateTotal(this)"></td>
                            <td class="item-total">0.00</td>
                        `;
                            itemsBody.appendChild(row);
                        });
                    })
                    .catch(error => console.error('Error fetching invoice items:', error));
            }

            function addItem() {
                const itemsContainer = document.getElementById('items-container');
                const newItemField = `
                    <div class="item-field">
                        <div>
                            <label for="Item">Item Code</label>
                            <select name="item_codes[]" onchange="syncItemDetails(this, 'code')" required>
                                ${items.map(item => `<option value="${item.item_code}">${item.item_code}</option>`).join('')}
                            </select>
                        </div>
                        <div id="item-name">
                            <label for="Description">Item Name</label>
                            <select name="descriptions[]" onchange="syncItemDetails(this, 'name')" required>
                                ${items.map(item => `<option value="${item.description}">${item.description}</option>`).join('')}
                            </select>
                        </div>
                        <div>
                            <label for="Price">Unit Price</label>
                            <input type="number" step="0.01" name="prices[]" required oninput="updateTotal(this)">
                        </div>
                        <div>
                            <label for="Quantity">Quantity</label>
                            <input type="number" name="quantities[]" required oninput="updateTotal(this)">
                        </div>
                        <div>
                            <label for="Discount">Discount</label>
                            <input type="number" name="discounts[]" required oninput="updateTotal(this)">
                        </div>
                        <div>
                            <label for="Total">Total</label>
                            <span class="item-total">0.00</span>
                        </div>
                        <div>
                            <button type="button" onclick="removeItem(this)">Remove</button>
                        </div>
                    </div>
                `;
                itemsContainer.insertAdjacentHTML('beforeend', newItemField);
            }

            function removeItem(button) {
                const itemField = button.closest('.item-field');
                itemField.remove();
                updateGrandTotal();
            }

            function syncItemDetails(selectElement, type) {
                const selectedValue = selectElement.value;
                const itemField = selectElement.closest('.item-field, tr');
                const itemCodeSelect = itemField.querySelector('[name="item_codes[]"], [name="invoice_item_codes[]"]');
                const itemNameSelect = itemField.querySelector('[name="descriptions[]"], [name="invoice_descriptions[]"]');
                
                if (type === 'code') {
                    const selectedItem = items.find(item => item.item_code === selectedValue);
                    itemNameSelect.value = selectedItem.description;
                } else {
                    const selectedItem = items.find(item => item.description === selectedValue);
                    itemCodeSelect.value = selectedItem.item_code;
                }
                
            }

            function updateTotal(inputElement) {
                const itemField = inputElement.closest('.item-field, tr');
                const price = parseFloat(itemField.querySelector('[name="prices[]"], [name="invoice_prices[]"]').value) || 0;
                const quantity = parseFloat(itemField.querySelector('[name="quantities[]"], [name="invoice_quantities[]"]').value) || 0;
                const discount = parseFloat(itemField.querySelector('[name="discounts[]"], [name="invoice_discounts[]"]').value) || 0;

                const total = (price * quantity) * (1 - discount / 100);
                itemField.querySelector('.item-total').textContent = total.toFixed(2);

                updateGrandTotal();
            }

            function updateGrandTotal() {
                const totals = document.querySelectorAll('.item-total');
                let grandTotal = 0;
                totals.forEach(total => {
                    grandTotal += parseFloat(total.textContent);
                });
                document.getElementById('grand-total').textContent = grandTotal.toFixed(2);
            }
        </script>
</body>

</html>
